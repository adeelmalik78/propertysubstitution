##########           LIQUIBASE FLOWFILE                ##########
##########  learn more http://docs.liquibase.com/flow  ##########

## Run this file by executing "liquibase flow" or "liquibase flow --flow-file=liquibase.flowfile.yaml"

# globalVariables:
#   SCHEMA: DEV
  # BYPASS_LIQUIBASE_CHECKS: bypass

## Note: Any command which fails in any stage below result in the command stopping, and endStage being run.
## A flow file can have one or more stages, each with multiple "actions", 
## or your flow file can have multiple stages with fewer actions in each stage.
stages:

  # Drift_Detection:
  #   actions:
  #     - type: liquibase
  #       command: diff
  #       cmdArgs: { referenceUrl: "offline:postgresql?snapshot=mySnapshot.json", format: json }
  #       globalArgs: { outputFile: "diff.json", mirror-console-messages-to-log: "true"}

  #     - type: shell
  #       command: powershell "./myscript.ps1"

  Status Database:
    actions:
      - type: liquibase
        command: status
        cmdArgs: {verbose: "true"}
        globalArgs: { contexts: "${SCHEMA}", liquibase-schema-name: "${SCHEMA}"}

  # Run Quality Checks:
    actions:
      - type: liquibase
        command: checks run
        cmdArgs: {checks-scope: changelog}

      # - type: shell
      #   command: |
      #     if %BYPASS_LIQUIBASE_CHECKS% == bypass (
      #       echo BYPASS_LIQUIBASE_CHECKS=true
      #       liquibase checks run || exit /b 0
      #     ) else (
      #       echo BYPASS_LIQUIBASE_CHECKS=false
      #       liquibase checks run
      #       timeout 5
      #     )

  # DB_Deployment:
  #   actions:
  #     - type: liquibase
  #       command: tag
  #       cmdArgs: {tag: "${TAG}"}
  #       globalArgs: { contexts: "${SCHEMA}", liquibase-schema-name: "${SCHEMA}"}
  #     - type: liquibase
  #       command: update-testing-rollback
  #       globalArgs: { contexts: "${SCHEMA}", liquibase-schema-name: "${SCHEMA}"}
  #     - type: liquibase
  #       command: rollback-one-update
  #       cmdArgs: { force: "true" }
  #       globalArgs: { contexts: "${SCHEMA}", liquibase-schema-name: "${SCHEMA}"}

## The endStage ALWAYS RUNS. 
## So put actions here which you desire to perform whether previous stages' actions succeed or fail.
## If you do not want any actions to ALWAYS RUN, simply delete the endStage from your flow file.
endStage:
  actions:
    - type: liquibase
      command: history
      globalArgs: { contexts: "${SCHEMA}", liquibase-schema-name: "${SCHEMA}"}
